// <auto-generated />
using System;
using Internal.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Internal.DAL.Migrations
{
    [DbContext(typeof(PipelineDbContext))]
    [Migration("20251002095201_AddPipelineTables")]
    partial class AddPipelineTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Internal.DAL.Entities.DatabaseNodeConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalParams")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DataNodeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte>("DatabaseType")
                        .HasColumnType("smallint");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("DataNodeId")
                        .IsUnique();

                    b.ToTable("DatabaseNodeConfigs", "public");
                });

            modelBuilder.Entity("Internal.DAL.Entities.FileNodeConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DataNodeId")
                        .HasColumnType("uuid");

                    b.Property<byte>("FileType")
                        .HasColumnType("smallint");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("DataNodeId")
                        .IsUnique();

                    b.ToTable("FileNodeConfigs", "public");
                });

            modelBuilder.Entity("Internal.DAL.Entities.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Pipelines", "public");
                });

            modelBuilder.Entity("Internal.DAL.Entities.PipelineDataNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataNodeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.HasIndex("PipelineId", "NodeType");

                    b.ToTable("PipelineDataNodes", "public");
                });

            modelBuilder.Entity("Internal.DAL.Entities.PipelineFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.ToTable("PipelineFunctions", "public");
                });

            modelBuilder.Entity("Internal.DAL.Entities.PipelineRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uuid");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.ToTable("PipelineRelationships", "public");
                });

            modelBuilder.Entity("Internal.DAL.Entities.PipelineRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StartedByUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.HasIndex("StartedByUserId");

                    b.ToTable("PipelineRuns", "public");
                });

            modelBuilder.Entity("Internal.DAL.Entities.PipelineRunDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<Guid>("PipelineRunId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResultJson")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PipelineRunId")
                        .IsUnique();

                    b.ToTable("PipelineRunDetails", "public");
                });

            modelBuilder.Entity("Internal.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("Internal.DAL.Entities.DatabaseNodeConfig", b =>
                {
                    b.HasOne("Internal.DAL.Entities.PipelineDataNode", "DataNode")
                        .WithOne("DatabaseConfig")
                        .HasForeignKey("Internal.DAL.Entities.DatabaseNodeConfig", "DataNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataNode");
                });

            modelBuilder.Entity("Internal.DAL.Entities.FileNodeConfig", b =>
                {
                    b.HasOne("Internal.DAL.Entities.PipelineDataNode", "DataNode")
                        .WithOne("FileConfig")
                        .HasForeignKey("Internal.DAL.Entities.FileNodeConfig", "DataNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataNode");
                });

            modelBuilder.Entity("Internal.DAL.Entities.Pipeline", b =>
                {
                    b.HasOne("Internal.DAL.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("Internal.DAL.Entities.PipelineDataNode", b =>
                {
                    b.HasOne("Internal.DAL.Entities.Pipeline", "Pipeline")
                        .WithMany("DataNodes")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("Internal.DAL.Entities.PipelineFunction", b =>
                {
                    b.HasOne("Internal.DAL.Entities.Pipeline", "Pipeline")
                        .WithMany("Functions")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("Internal.DAL.Entities.PipelineRelationship", b =>
                {
                    b.HasOne("Internal.DAL.Entities.Pipeline", "Pipeline")
                        .WithMany("Relationships")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("Internal.DAL.Entities.PipelineRun", b =>
                {
                    b.HasOne("Internal.DAL.Entities.Pipeline", "Pipeline")
                        .WithMany()
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Internal.DAL.Entities.User", "StartedByUser")
                        .WithMany()
                        .HasForeignKey("StartedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pipeline");

                    b.Navigation("StartedByUser");
                });

            modelBuilder.Entity("Internal.DAL.Entities.PipelineRunDetail", b =>
                {
                    b.HasOne("Internal.DAL.Entities.PipelineRun", "PipelineRun")
                        .WithOne("Detail")
                        .HasForeignKey("Internal.DAL.Entities.PipelineRunDetail", "PipelineRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PipelineRun");
                });

            modelBuilder.Entity("Internal.DAL.Entities.Pipeline", b =>
                {
                    b.Navigation("DataNodes");

                    b.Navigation("Functions");

                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("Internal.DAL.Entities.PipelineDataNode", b =>
                {
                    b.Navigation("DatabaseConfig");

                    b.Navigation("FileConfig");
                });

            modelBuilder.Entity("Internal.DAL.Entities.PipelineRun", b =>
                {
                    b.Navigation("Detail");
                });
#pragma warning restore 612, 618
        }
    }
}
